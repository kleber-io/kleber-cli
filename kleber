#!/usr/bin/env bash
# --
# Kleber (kleber.io) API CLI
#
# Home:         https://github.com/kleber-io/kleber-cli
# License:      GPLv3 (see LICENSE for full license text)
# Usage:        kleber --help
# --
set -e
ARGS="$*"
VERSION="0.7.2"
KLEBER_URL="https://kleber.io"
KLEBER_API_URL="${KLEBER_URL}/api"
KLEBER_MAX_SIZE=262144000
KLEBER_RCFILE=~/.kleberrc
UPLOAD_LIFETIME=604800
USERAGENT="Kleber CLI client v${VERSION}"
DEBUG=0
SECURE_URL=0
EXIFTOOL=0
API_URL=0
URL_EXT=0
XCLIP_BIN=0
EXIFTOOL_BIN=0
JQ_BIN=0
OPENSSL_BIN=0
SCREENSHOOTER=0
PAGINATION_OFFSET=0
PAGINATION_LIMIT=10
TMPDIR=$(mktemp -dt kleber.XXXXXX)
trap "rm -rf ${TMPDIR}" EXIT TERM

err(){
    exitval=$1
    shift
    echo 1>&2 "ERROR: $*"
    exit "$exitval"
}

warn(){
    echo 1>&2 "WARNING: $*"
}

info(){
    if [ -z "$QUIET" ] || checkseyno "$QUIET";then
        echo "$*"
    fi
}

debug(){
    case $DEBUG in
    [Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1)
        echo 1>&2 "DEBUG: $*"
        ;;
    esac
}

checkyesno(){
    if [ -z "$1" ];then
        return 1
    fi
    eval _value=\$${1}
    debug "checkyesno: ${1} is set to ${_value}."
    case $_value in
        #   "yes", "true", "on", or "1"
    [Yy][Ee][Ss]|[Tt][Rr][Uu][Ee]|[Oo][Nn]|1)
        return 0
        ;;
        #   "no", "false", "off", or "0"
    [Nn][Oo]|[Ff][Aa][Ll][Ss][Ee]|[Oo][Ff][Ff]|0)
        return 1
        ;;
    *)
        return 1
        ;;
    esac
}

check_euid(){
    if [ "$(id -u)" -eq 0 ]; then
      warn "You should not run this with root privileges!"
      read -r
    fi
}

check_dependencies(){
    if ! which curl >/dev/null;then
        err 1 "curl is required, please install it"
    fi
    
    if ! which jq >/dev/null;then
        err 1 "jq is required, please install it"
    fi

    if which xclip >/dev/null;then
        XCLIP_BIN=1
    fi

    if which exiftool >/dev/null;then
        EXIFTOOL_BIN=1
    fi

    if which import >/dev/null;then
        SCREENSHOOTER=1
    fi
}

check_is_url(){
    local url_regex="(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]"
    if [[ $1 =~ $url_regex ]];then
        return 0
    else
        return 1
    fi
}

check_is_port(){
    if [ "$1" -gt 1 ] && [ "$1" -lt 65536 ];then
        return 1
    else
        return 0
    fi
}

check_is_ip4(){
    local ip4_regex="[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}"
    if [[ $1 =~ $ip4_regex ]];then
        return 1
    else
        return 0
    fi
}

cmdline(){
    arg=
    for arg
    do
        delim=""
        case "$arg" in
            --debug)          args="${args}-x ";;
            --upload)         args="${args}-u ";;
            --delete)         args="${args}-d ";;
            --list)           args="${args}-l ";;
            --api-url)        args="${args}-a ";;
            --upload-screenshot) args="${args}-b";;
            --remove-meta)    args="${args}-e ";;
            --name)           args="${args}-n ";;
            --password)       args="${args}-w ";;
            --lifetime)       args="${args}-t ";;
            --offset)         args="${args}-O ";;
            --limit)          args="${args}-L ";;
            --clipboard)      args="${args}-p ";;
            --secure-url)     args="${args}-s ";;
            --config)         args="${args}-c ";;
            --curl-config)    args="${args}-C ";;
            --print-api-url)  args="${args}-f ";;
            --help)           args="${args}-h ";;
            --quiet)          args="${args}-q ";;
            *)
                if [ ! "${arg}:0:1" = "-" ];then
                    delim="\""
                fi
                args="${args}${delim}${arg}${delim} ";;
        esac
    done

    eval set -- "$args"

    while getopts "xhlpd:u:c:Ct:n:O:L:sga:e:pyz:rfbw:" OPTION
    do
        case $OPTION in
         x)
            DEBUG=1
            set -x
            ;;
         q)
            QUIET=1
            ;;
         u)
            COMMAND_UPLOAD="$OPTARG"
            ;;
         d)
            COMMAND_DELETE="$OPTARG"
            ;;
         l)
            COMMAND_LIST=1
            ;;
         a)
            URL_EXT="$OPTARG"
            if ! check_is_url "$URL_EXT";then
                err 1 "Invalid URL ${URL_EXT}"
            fi
            ;;
         b)
            COMMAND_UPLOAD_SCREENSHOT=1
            ;;
         e)
            if ! checkyesno "$EXIFTOOL_BIN";then
                err 1 "exiftool not found"
            fi

            EXIFTOOL_BIN=1
            EXIFTOOL_INPUT=$OPTARG
            ;;
         n)
            UPLOAD_NAME="$OPTARG"
            ;;
         w)
            UPLOAD_PASSWORD="$OPTARG"
            ;;
         t)
            UPLOAD_LIFETIME=$OPTARG
            ;;
         O)
            PAGINATION_OFFSET=$OPTARG
            ;;
         L)
            PAGINATION_LIMIT=$OPTARG
            ;;
         s)
            SECURE_URL=1
            ;;
         p)
            KLEBER_CLIPBOARD_DEFAULT=1
            ;;
         c)
            CONFIG_FILE=$OPTARG
            ;;
         f)
            API_URL=1
            ;;
         h)
            help
            exit 0
            ;;
         *)
            help
            exit 1
            ;;
        esac
    done
}

help() {
	cat <<!
Kleber (kleber.io) API CLI v${VERSION}
usage: [cat |] $(basename "$0") [command] [options] [file|shortcut]

Commands:
    -u | --upload <file>            Upload a file
    -g | --get <file>               Get a file
    -d | --delete <shortcut>        Delete a paste/file
    -l | --list                     Print upload history
    -e | --remove-meta <file|dir>   Remove metadata from a regular file or directory.
                                    This requires exiftool to be installed in \$PATH.
    -b | --upload-screenshot        Take a screenshot and upload it.

Upload Options:
    -n | --name <name>              Name/Title for a paste
    -s | --secure-url               Create with secure URL
    -t | --lifetime <lifetime>      Set upload lifetimes (in seconds)
    -f | --print-api-url            Return API URL instead of web URL
    -w | --password                 Protect upload with password

Get Options:
    -o | --output <location>        Output location (default: current directory)

List Options:
    -o | --offset <offset>          Pagination offset (default: 0)
    -k | --limit <limit>            Pagination limit (default: 10)

General Options:
    -p | --clipboard                Add document link to clipboard
    -a | --url                      Set alternative URL (default: https://kleber.io/)
    -c | --config                   Provide a custom config file (default: ~/.kleberrc)
    -q | --quiet                    Suppress output
    -x | --debug                    Show debug output
    -h | --help                     Show this help
!
}

load_config(){
    if [ -n "$CONFIG_FILE" ];then
        config=$CONFIG_FILE
    else
        config=$KLEBER_RCFILE
    fi
    if [ ! -r $config ] || [ ! -f $config ];then
        err 1 "Cannot read config file ${config}"
    fi
    if [ -n "$KLEBER_API_KEY" ];then
        err 1 "API key not found. Pleaase put it in the config file."
    fi
    . $config
}

read_stdin() {
    local temp_file=$1
	if tty -s; then
        printf "%s\n" "^C to exit, ^D to send"
	fi
	cat > "$temp_file"
}

copy_to_clipper(){
    local location=$1
    if checkyesno "$KLEBER_CLIPBOARD_DEFAULT";then
        if checkyesno "$XCLIP_BIN";then
            echo "${location}" | xclip -selection clipboard 
        else
            warn "xclip not found"
        fi
    fi
}

cmd_upload(){
    local file=$1
    local auth_header="Authorization: Token ${KLEBER_API_KEY}"
    local request_url="${KLEBER_API_URL}/files/"
    local headerfile=$(mktemp "${TMPDIR}/header.XXXXXX")
    if [ ! -r "$file" ];then
        err 1 "Cannot read file ${file}"
    elif [ "$(stat -c %s "${file}")" -eq 0 ];then
        err 1 "File size is 0"
    elif [ "$(stat -c %s "${file}")" -gt $KLEBER_MAX_SIZE ];then
        err 1 "File size exceeds maximum size"
    fi
    local filestr="uploaded_file=@${file}"
    if [ -n "$UPLOAD_NAME" ];then
        filestr="${filestr};filename=${UPLOAD_NAME}"
    fi
    if checkyesno "$SECURE_URL";then
        SECURE_URL="secure_shortcut=true"
    else
        SECURE_URL="secure_shortcut=false"
    fi
    if [ -n "$UPLOAD_PASSWORD" ];then
        PASSWORD="password=${UPLOAD_PASSWORD}"
    else
        PASSWORD="password="
    fi
    local curl_out=$(eval "curl \
        --progress-bar \
        --tlsv1 \
        --user-agent \"${USERAGENT}\" \
        --header \"${auth_header}\" \
        --form ${SECURE_URL} \
        --form ${PASSWORD} \
        --form lifetime=${UPLOAD_LIFETIME} \
        --form \"${filestr}\" \
        --dump-header $headerfile \
        ${request_url}")
    local status_code="$(cat ${headerfile} | grep -Eo '^HTTP\/1\.[0-1]\s[0-9]{3}\s' | tail -n1 | grep -Eo '[0-9]{3}')"
    if [ -z $status_code ];then
        err 1 "Connection to Kleber failed"
    fi
    if [ $status_code -eq 201 ];then
        local location="$(echo ${curl_out} | jq -r .shortcut)"
        if [ -z $location ];then
            err 1 "Could not extract location"
        fi
        local upload_url="${KLEBER_URL}/${location}"
        if [ -n "$UPLOAD_PASSWORD" ];then
            upload_url="${upload_url}?password=${UPLOAD_PASSWORD}"
        fi
        echo $upload_url
        copy_to_clipper "$upload_url"
    else
        echo $curl_out | jq -r ".detail"
    fi
}

cmd_get(){
    local url=$1
    if check_is_url "$url";then
        a=b
    fi
    local curl_out=$(eval "curl \
        -s \
        -v \
        -O \
        ${API_URL}/${url}")
    local file_name="$(echo $curl_out | grep -oE 'filename=.*$' | sed -e 's/filename=//')"
    if checkyesno "$DECRYPT_FILE";then
      a=b  
    fi
}

cmd_list(){
    local auth_header="Authorization: Token ${KLEBER_API_KEY}"
    local headerfile=$(mktemp "${TMPDIR}/header.XXXXXX")
    local request_url="${KLEBER_API_URL}/uploads/"
    curl_out=$(eval "curl \
        --tlsv1 \
        -L \
        -s \
        --user-agent \"${USERAGENT}\" \
        --header \"${auth_header}\" \
        --dump-header $headerfile \
        ${request_url}")
    local status_code="$(awk '/^HTTP\/1.[0-1]\s[0-9]{3}\s/ {a=$2} END{print a}' ${headerfile})"
    if [ $status_code -eq 200 ];then
        echo $curl_out |jq '.results[] | {name: .name, mimetype: .mimetype, shortcut: .shortcut, size: .size, create: .created, url: "https://kleber.io/\(.shortcut)"}'
    else
        echo $curl_out | jq -r ".detail"
    fi
}

cmd_delete(){
    local shortcut=$1
    local auth_header="Authorization: Token ${KLEBER_API_KEY}"
    local headerfile=$(mktemp "${TMPDIR}/header.XXXXXX")
    local request_url="${KLEBER_API_URL}/pastes/${shortcut}"
    local status_code=$(eval "curl \
        -s \
        -X DELETE \
        --tlsv1 \
        -L \
        --dump-header $headerfile \
        --header \"$auth_header\" \
        $request_url" |grep -Po "[0-9]{3}$"
    )
    local status_code="$(awk '/^HTTP\/1.[0-1]\s[0-9]{3}\s/ {a=$2} END{print a}' ${headerfile})"
    if [ $status_code -eq 200 ];then
        debug "Upload successfully deleted"
    else
        echo $curl_out | jq -r ".detail"
    fi
}

cmd_remove_meta(){
    # A very simple exiftool wrapper that removes all metadata it knows.
    local input=$1
    if [ -f "$input" ];then
        exiftoolL -all= "$input" >/dev/null 2>&1
        RET=$?
    elif [ -d "$input" ];then
        exiftool -r -all= "$input" >/dev/null 2>&1
        RET=$?
    else
        err 1 "You need to supply a regular file or a directory."
    fi

    if [ "$RET" = 0 ];then
        info "Metadata removed"
    else
        err 1 "Removing metadata failed!"
    fi
}

cmd_upload_screenshot(){
    if ! checkyesno $SCREENSHOOTER;then
        err "import utility not found!"
    fi
    local tmpfile=$(mktemp "${TMPDIR}/cli.XXXXXX.png")
    import -border "$tmpfile"
    cmd_upload "$tmpfile"
}

main(){
    check_euid
    check_dependencies
    cmdline $ARGS
    load_config
    if [ -n "$COMMAND_UPLOAD" ];then
        cmd_upload "$COMMAND_UPLOAD"
    elif [ -n "$COMMAND_DELETE" ];then
        cmd_delete "$COMMAND_DELETE"
    elif [ -n "$COMMAND_LIST" ];then
        cmd_list
    elif [ -n "$COMMAND_UPLOAD_SCREENSHOT" ];then
        cmd_upload_screenshot
    elif [ "$EXIFTOOL" != 0 ];then
        cmd_remove_meta "$EXIFTOOL_INPUT"
    else
        tmpfile=$(mktemp "${TMPDIR}/cli.XXXXXX")
        read_stdin "$tmpfile"
        cmd_upload "$tmpfile"
    fi
    return 0
}

main
